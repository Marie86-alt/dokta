diff --git a/backend/server.py b/backend/server.py
index 66a45f8..7d08b9f 100644
--- a/backend/server.py
+++ b/backend/server.py
@@ -411,6 +411,79 @@ async def get_doctor_patients(doctor_id: str):
     
     return sorted(patients, key=lambda p: p.get("last_appointment", ""), reverse=True)
 
+# Global Search Route
+@api_router.get("/search")
+async def global_search(q: str):
+    if len(q) < 2:
+        return {"results": []}
+    
+    query_lower = q.lower()
+    results = []
+    
+    try:
+        # Recherche des médecins
+        doctors = await db.doctors.find({"disponible": True}).to_list(100)
+        for doctor in doctors:
+            if (query_lower in doctor["nom"].lower() or 
+                query_lower in doctor["specialite"].lower()):
+                # Convert to Doctor model to handle serialization
+                doctor_obj = Doctor(**doctor)
+                results.append({
+                    "id": doctor["id"],
+                    "type": "doctor",
+                    "title": doctor["nom"],
+                    "subtitle": doctor["specialite"],
+                    "metadata": f"{doctor['tarif']:,} FCFA • {doctor['experience']}",
+                    "data": doctor_obj.dict()
+                })
+        
+        # Recherche des spécialités
+        specialties_list = [spec.value for spec in SpecialtyType]
+        for specialty in specialties_list:
+            if query_lower in specialty.lower():
+                # Compter les médecins de cette spécialité
+                count = await db.doctors.count_documents({
+                    "specialite": specialty,
+                    "disponible": True
+                })
+                results.append({
+                    "id": specialty.lower().replace(" ", "_"),
+                    "type": "specialty",
+                    "title": specialty,
+                    "subtitle": "Spécialité médicale",
+                    "metadata": f"{count} médecin{'s' if count > 1 else ''} disponible{'s' if count > 1 else ''}",
+                    "data": {"value": specialty, "label": specialty}
+                })
+        
+        # Recherche des patients (pour les médecins connectés)
+        # Cette partie nécessiterait l'ID du médecin connecté
+        patients = await db.users.find({"type": "patient"}).to_list(100)
+        for patient in patients:
+            if query_lower in patient["nom"].lower():
+                # Trouver la dernière consultation
+                last_appointment = await db.appointments.find_one(
+                    {"patient_id": patient["id"]},
+                    sort=[("created_at", -1)]
+                )
+                last_date = last_appointment["date"] if last_appointment else None
+                
+                # Convert to User model to handle serialization
+                patient_obj = User(**patient)
+                results.append({
+                    "id": patient["id"],
+                    "type": "patient",
+                    "title": patient["nom"],
+                    "subtitle": "Patient",
+                    "metadata": f"Dernière consultation: {last_date or 'Aucune'}",
+                    "data": patient_obj.dict()
+                })
+        
+        return {"results": results[:20]}  # Limiter à 20 résultats
+        
+    except Exception as e:
+        print(f"Erreur de recherche: {e}")
+        return {"results": []}
+
 # Include the router in the main app
 app.include_router(api_router)
 
diff --git a/model.patch b/model.patch
index 44150a6..e69de29 100644
--- a/model.patch
+++ b/model.patch
@@ -1,30 +0,0 @@
-diff --git a/test_result.md b/test_result.md
-index 9549733..b6208f2 100644
---- a/test_result.md
-+++ b/test_result.md
-@@ -135,11 +135,14 @@ backend:
-     file: "server.py"
-     stuck_count: 0
-     priority: "high"
--    needs_retesting: true
-+    needs_retesting: false
-     status_history:
-       - working: true
-         agent: "main"
-         comment: "API création rendez-vous avec vérification disponibilité implémentée"
-+      - working: true
-+        agent: "testing"
-+        comment: "Tests complets réussis (10/10): API Root, GET Specialties (8 spécialités), GET Doctors (5 médecins), GET Doctors by Specialty, POST Create Patient (données camerounaises), GET Available Slots (13 créneaux), POST Create Appointment, Double Booking Prevention, PUT Confirm Appointment, Slot Unavailable After Booking. Toutes les APIs critiques fonctionnent parfaitement avec données réalistes camerounaises."
- 
- frontend:
-   - task: "Interface accueil Patient/Médecin"
-@@ -219,4 +222,6 @@ test_plan:
- 
- agent_communication:
-   - agent: "main"
--    message: "Implémentation de la base patient/médecin terminée. Développement du calendrier de réservation et paiement Mobile Money en cours."
-\ No newline at end of file
-+    message: "Implémentation de la base patient/médecin terminée. Développement du calendrier de réservation et paiement Mobile Money en cours."
-+  - agent: "testing"
-+    message: "Tests backend complets terminés avec succès (10/10). Toutes les APIs critiques fonctionnent parfaitement: spécialités (8), médecins (5), créneaux disponibles, création patients/rendez-vous, prévention double réservation, confirmation paiement. Données camerounaises testées avec succès. Backend prêt pour intégration frontend."
-\ No newline at end of file
