diff --git a/frontend/app/_layout.tsx b/frontend/app/_layout.tsx
new file mode 100644
index 0000000..a0188fc
--- /dev/null
+++ b/frontend/app/_layout.tsx
@@ -0,0 +1,110 @@
+import { Stack } from 'expo-router';
+import { AuthProvider } from '../contexts/AuthContext';
+
+export default function RootLayout() {
+  return (
+    <AuthProvider>
+      <Stack>
+        <Stack.Screen name="index" options={{ headerShown: false }} />
+        <Stack.Screen name="login" options={{ headerShown: false }} />
+        <Stack.Screen name="register" options={{ headerShown: false }} />
+        <Stack.Screen 
+          name="booking/[doctorId]" 
+          options={{ 
+            title: 'Réserver un rendez-vous',
+            headerStyle: { backgroundColor: '#2E8B57' },
+            headerTintColor: '#fff',
+          }} 
+        />
+        <Stack.Screen 
+          name="patient-form" 
+          options={{ 
+            title: 'Informations patient',
+            headerStyle: { backgroundColor: '#2E8B57' },
+            headerTintColor: '#fff',
+          }} 
+        />
+        <Stack.Screen 
+          name="payment" 
+          options={{ 
+            title: 'Paiement',
+            headerStyle: { backgroundColor: '#2E8B57' },
+            headerTintColor: '#fff',
+          }} 
+        />
+        <Stack.Screen 
+          name="booking-confirmation" 
+          options={{ 
+            title: 'Confirmation',
+            headerStyle: { backgroundColor: '#2E8B57' },
+            headerTintColor: '#fff',
+          }} 
+        />
+        <Stack.Screen 
+          name="doctor-login" 
+          options={{ 
+            title: 'Connexion Médecin',
+            headerStyle: { backgroundColor: '#2E8B57' },
+            headerTintColor: '#fff',
+          }} 
+        />
+        <Stack.Screen 
+          name="doctor-dashboard" 
+          options={{ 
+            title: 'Tableau de bord',
+            headerStyle: { backgroundColor: '#2E8B57' },
+            headerTintColor: '#fff',
+          }} 
+        />
+        <Stack.Screen 
+          name="doctor-profile" 
+          options={{ 
+            title: 'Mon profil',
+            headerStyle: { backgroundColor: '#2E8B57' },
+            headerTintColor: '#fff',
+          }} 
+        />
+        <Stack.Screen 
+          name="doctor-patients" 
+          options={{ 
+            title: 'Mes patients',
+            headerStyle: { backgroundColor: '#2E8B57' },
+            headerTintColor: '#fff',
+          }} 
+        />
+        <Stack.Screen 
+          name="doctor-availability" 
+          options={{ 
+            title: 'Disponibilités',
+            headerStyle: { backgroundColor: '#2E8B57' },
+            headerTintColor: '#fff',
+          }} 
+        />
+        <Stack.Screen 
+          name="global-search" 
+          options={{ 
+            title: 'Recherche globale',
+            headerStyle: { backgroundColor: '#2E8B57' },
+            headerTintColor: '#fff',
+          }} 
+        />
+        <Stack.Screen 
+          name="patient-tabs" 
+          options={{ 
+            title: 'Patient',
+            headerStyle: { backgroundColor: '#2E8B57' },
+            headerTintColor: '#fff',
+          }} 
+        />
+        <Stack.Screen 
+          name="doctor-tabs" 
+          options={{ 
+            title: 'Médecin',
+            headerStyle: { backgroundColor: '#2E8B57' },
+            headerTintColor: '#fff',
+          }} 
+        />
+      </Stack>
+    </AuthProvider>
+  );
+}
\ No newline at end of file
diff --git a/model.patch b/model.patch
index 40c9c1b..e69de29 100644
--- a/model.patch
+++ b/model.patch
@@ -1,417 +0,0 @@
-diff --git a/frontend/app/index.tsx b/frontend/app/index.tsx
-index e57414b..53d9911 100644
---- a/frontend/app/index.tsx
-+++ b/frontend/app/index.tsx
-@@ -838,6 +838,67 @@ const styles = StyleSheet.create({
-     fontWeight: '600',
-     color: '#2E8B57',
-   },
-+  // Styles pour le profil utilisateur connecté
-+  userProfile: {
-+    width: '100%',
-+  },
-+  profileInfo: {
-+    backgroundColor: '#FFFFFF',
-+    padding: 20,
-+    borderRadius: 12,
-+    marginBottom: 16,
-+    borderLeftWidth: 4,
-+    borderLeftColor: '#2E8B57',
-+  },
-+  profileName: {
-+    fontSize: 20,
-+    fontWeight: 'bold',
-+    color: '#333',
-+    marginBottom: 4,
-+  },
-+  profilePhone: {
-+    fontSize: 16,
-+    color: '#2E8B57',
-+    fontWeight: '500',
-+    marginBottom: 8,
-+  },
-+  profileType: {
-+    fontSize: 14,
-+    color: '#666',
-+  },
-+  profileButton: {
-+    backgroundColor: '#FFFFFF',
-+    flexDirection: 'row',
-+    alignItems: 'center',
-+    justifyContent: 'center',
-+    paddingVertical: 16,
-+    borderRadius: 12,
-+    borderWidth: 2,
-+    borderColor: '#2E8B57',
-+    marginBottom: 12,
-+    gap: 8,
-+  },
-+  profileButtonText: {
-+    fontSize: 16,
-+    fontWeight: '600',
-+    color: '#2E8B57',
-+  },
-+  logoutButton: {
-+    backgroundColor: '#FFFFFF',
-+    flexDirection: 'row',
-+    alignItems: 'center',
-+    justifyContent: 'center',
-+    paddingVertical: 16,
-+    borderRadius: 12,
-+    borderWidth: 2,
-+    borderColor: '#E74C3C',
-+    gap: 8,
-+  },
-+  logoutButtonText: {
-+    fontSize: 16,
-+    fontWeight: '600',
-+    color: '#E74C3C',
-+  },
-   // Bouton flottant médecin
-   doctorFloatingButton: {
-     position: 'absolute',
-diff --git a/model.patch b/model.patch
-index e6bd0ff..e69de29 100644
---- a/model.patch
-+++ b/model.patch
-@@ -1,340 +0,0 @@
--diff --git a/backend/server.py b/backend/server.py
--index b3a48bc..0cbedbb 100644
----- a/backend/server.py
--+++ b/backend/server.py
--@@ -490,9 +490,6 @@ async def global_search(q: str):
--         print(f"Erreur de recherche: {e}")
--         return {"results": []}
-- 
---# Include the router in the main app
---app.include_router(api_router)
---
-- # Routes d'authentification
-- @api_router.post("/auth/register", response_model=Token)
-- async def register_user(user_data: UserRegistration):
--@@ -506,7 +503,7 @@ async def register_user(user_data: UserRegistration):
--         )
--     
--     # Vérifier si l'utilisateur existe déjà
---    existing_user = await db.users.find_one({"telephone": user_data.telephone})
--+    existing_user = await db.users.find_one({"telephone": user_data.telephone}, {"_id": 0})
--     if existing_user:
--         raise HTTPException(
--             status_code=400,
--@@ -556,18 +553,20 @@ async def register_user(user_data: UserRegistration):
--             "telephone": user_data.telephone,
--             "created_at": datetime.utcnow().isoformat()
--         }
---        await db.doctors.insert_one(doctor_dict)
--+        result = await db.doctors.insert_one(doctor_dict)
--+        print(f"Doctor inserted with _id: {result.inserted_id}")
--     
--     # Insérer l'utilisateur
---    await db.users.insert_one(user_dict)
--+    result = await db.users.insert_one(user_dict)
--+    print(f"User inserted with _id: {result.inserted_id}")
--     
--     # Créer le token JWT
--     access_token = create_access_token(
--         data={"sub": user_data.telephone, "user_type": user_data.type_utilisateur}
--     )
--     
---    # Préparer les données utilisateur à retourner (sans mot de passe)
---    user_data_return = {k: v for k, v in user_dict.items() if k != "mot_de_passe"}
--+    # Préparer les données utilisateur à retourner (sans mot de passe et sans _id)
--+    user_data_return = {k: v for k, v in user_dict.items() if k not in ["mot_de_passe", "_id"]}
--     
--     return Token(
--         access_token=access_token,
--@@ -587,7 +586,7 @@ async def login_user(login_data: UserLogin):
--         )
--     
--     # Trouver l'utilisateur
---    user = await db.users.find_one({"telephone": login_data.telephone})
--+    user = await db.users.find_one({"telephone": login_data.telephone}, {"_id": 0})
--     if not user:
--         raise HTTPException(
--             status_code=401,
--@@ -625,7 +624,7 @@ async def login_user(login_data: UserLogin):
-- async def get_current_user_profile(current_user: TokenData = Depends(get_current_user)):
--     """Obtenir le profil de l'utilisateur actuel"""
--     
---    user = await db.users.find_one({"telephone": current_user.telephone})
--+    user = await db.users.find_one({"telephone": current_user.telephone}, {"_id": 0})
--     if not user:
--         raise HTTPException(status_code=404, detail="Utilisateur non trouvé")
--     
--@@ -665,6 +664,9 @@ async def update_user_profile(
--     
--     return {"message": "Profil mis à jour avec succès"}
-- 
--+# Include the router in the main app
--+app.include_router(api_router)
--+
-- app.add_middleware(
--     CORSMiddleware,
--     allow_credentials=True,
--diff --git a/model.patch b/model.patch
--index 22de4a8..e69de29 100644
----- a/model.patch
--+++ b/model.patch
--@@ -1,226 +0,0 @@
---diff --git a/backend/server.py b/backend/server.py
---index 7d08b9f..67cb57d 100644
------ a/backend/server.py
---+++ b/backend/server.py
---@@ -1,15 +1,21 @@
----from fastapi import FastAPI, APIRouter, HTTPException
----from dotenv import load_dotenv
----from starlette.middleware.cors import CORSMiddleware
---+from fastapi import FastAPI, APIRouter, HTTPException, Depends
---+from fastapi.middleware.cors import CORSMiddleware
---+from pydantic import BaseModel, Field
---+from datetime import datetime, date, time
---+from typing import Optional, List
---+import uuid
---+from enum import Enum
--- from motor.motor_asyncio import AsyncIOMotorClient
---+from dotenv import load_dotenv
--- import os
--- import logging
--- from pathlib import Path
----from pydantic import BaseModel, Field
----from typing import List, Optional
----import uuid
----from datetime import datetime, date, time
----from enum import Enum
---+
---+# Import du système d'authentification
---+from auth import (
---+    UserRegistration, UserLogin, Token, get_password_hash, verify_password, 
---+    create_access_token, validate_cameroon_phone, get_current_user, TokenData
---+)
--- 
--- 
--- ROOT_DIR = Path(__file__).parent
---diff --git a/model.patch b/model.patch
---index 9be0628..e69de29 100644
------ a/model.patch
---+++ b/model.patch
---@@ -1,187 +0,0 @@
----diff --git a/model.patch b/model.patch
----index 54b47cc..e69de29 100644
------- a/model.patch
----+++ b/model.patch
----@@ -1,182 +0,0 @@
-----diff --git a/model.patch b/model.patch
-----index 505ffa6..e69de29 100644
-------- a/model.patch
-----+++ b/model.patch
-----@@ -1,177 +0,0 @@
------diff --git a/model.patch b/model.patch
------index fb6ed65..e69de29 100644
--------- a/model.patch
------+++ b/model.patch
------@@ -1,172 +0,0 @@
-------diff --git a/model.patch b/model.patch
-------index 4c0b400..e69de29 100644
---------- a/model.patch
-------+++ b/model.patch
-------@@ -1,119 +0,0 @@
--------diff --git a/backend/server.py b/backend/server.py
--------index 66a45f8..7d08b9f 100644
----------- a/backend/server.py
--------+++ b/backend/server.py
--------@@ -411,6 +411,79 @@ async def get_doctor_patients(doctor_id: str):
--------     
--------     return sorted(patients, key=lambda p: p.get("last_appointment", ""), reverse=True)
-------- 
--------+# Global Search Route
--------+@api_router.get("/search")
--------+async def global_search(q: str):
--------+    if len(q) < 2:
--------+        return {"results": []}
--------+    
--------+    query_lower = q.lower()
--------+    results = []
--------+    
--------+    try:
--------+        # Recherche des médecins
--------+        doctors = await db.doctors.find({"disponible": True}).to_list(100)
--------+        for doctor in doctors:
--------+            if (query_lower in doctor["nom"].lower() or 
--------+                query_lower in doctor["specialite"].lower()):
--------+                # Convert to Doctor model to handle serialization
--------+                doctor_obj = Doctor(**doctor)
--------+                results.append({
--------+                    "id": doctor["id"],
--------+                    "type": "doctor",
--------+                    "title": doctor["nom"],
--------+                    "subtitle": doctor["specialite"],
--------+                    "metadata": f"{doctor['tarif']:,} FCFA • {doctor['experience']}",
--------+                    "data": doctor_obj.dict()
--------+                })
--------+        
--------+        # Recherche des spécialités
--------+        specialties_list = [spec.value for spec in SpecialtyType]
--------+        for specialty in specialties_list:
--------+            if query_lower in specialty.lower():
--------+                # Compter les médecins de cette spécialité
--------+                count = await db.doctors.count_documents({
--------+                    "specialite": specialty,
--------+                    "disponible": True
--------+                })
--------+                results.append({
--------+                    "id": specialty.lower().replace(" ", "_"),
--------+                    "type": "specialty",
--------+                    "title": specialty,
--------+                    "subtitle": "Spécialité médicale",
--------+                    "metadata": f"{count} médecin{'s' if count > 1 else ''} disponible{'s' if count > 1 else ''}",
--------+                    "data": {"value": specialty, "label": specialty}
--------+                })
--------+        
--------+        # Recherche des patients (pour les médecins connectés)
--------+        # Cette partie nécessiterait l'ID du médecin connecté
--------+        patients = await db.users.find({"type": "patient"}).to_list(100)
--------+        for patient in patients:
--------+            if query_lower in patient["nom"].lower():
--------+                # Trouver la dernière consultation
--------+                last_appointment = await db.appointments.find_one(
--------+                    {"patient_id": patient["id"]},
--------+                    sort=[("created_at", -1)]
--------+                )
--------+                last_date = last_appointment["date"] if last_appointment else None
--------+                
--------+                # Convert to User model to handle serialization
--------+                patient_obj = User(**patient)
--------+                results.append({
--------+                    "id": patient["id"],
--------+                    "type": "patient",
--------+                    "title": patient["nom"],
--------+                    "subtitle": "Patient",
--------+                    "metadata": f"Dernière consultation: {last_date or 'Aucune'}",
--------+                    "data": patient_obj.dict()
--------+                })
--------+        
--------+        return {"results": results[:20]}  # Limiter à 20 résultats
--------+        
--------+    except Exception as e:
--------+        print(f"Erreur de recherche: {e}")
--------+        return {"results": []}
--------+
-------- # Include the router in the main app
-------- app.include_router(api_router)
-------- 
--------diff --git a/model.patch b/model.patch
--------index 44150a6..e69de29 100644
----------- a/model.patch
--------+++ b/model.patch
--------@@ -1,30 +0,0 @@
---------diff --git a/test_result.md b/test_result.md
---------index 9549733..b6208f2 100644
------------ a/test_result.md
---------+++ b/test_result.md
---------@@ -135,11 +135,14 @@ backend:
---------     file: "server.py"
---------     stuck_count: 0
---------     priority: "high"
----------    needs_retesting: true
---------+    needs_retesting: false
---------     status_history:
---------       - working: true
---------         agent: "main"
---------         comment: "API création rendez-vous avec vérification disponibilité implémentée"
---------+      - working: true
---------+        agent: "testing"
---------+        comment: "Tests complets réussis (10/10): API Root, GET Specialties (8 spécialités), GET Doctors (5 médecins), GET Doctors by Specialty, POST Create Patient (données camerounaises), GET Available Slots (13 créneaux), POST Create Appointment, Double Booking Prevention, PUT Confirm Appointment, Slot Unavailable After Booking. Toutes les APIs critiques fonctionnent parfaitement avec données réalistes camerounaises."
--------- 
--------- frontend:
---------   - task: "Interface accueil Patient/Médecin"
---------@@ -219,4 +222,6 @@ test_plan:
--------- 
--------- agent_communication:
---------   - agent: "main"
----------    message: "Implémentation de la base patient/médecin terminée. Développement du calendrier de réservation et paiement Mobile Money en cours."
---------\ No newline at end of file
---------+    message: "Implémentation de la base patient/médecin terminée. Développement du calendrier de réservation et paiement Mobile Money en cours."
---------+  - agent: "testing"
---------+    message: "Tests backend complets terminés avec succès (10/10). Toutes les APIs critiques fonctionnent parfaitement: spécialités (8), médecins (5), créneaux disponibles, création patients/rendez-vous, prévention double réservation, confirmation paiement. Données camerounaises testées avec succès. Backend prêt pour intégration frontend."
---------\ No newline at end of file
-------diff --git a/test_result.md b/test_result.md
-------index da3f20e..e4faf0d 100644
---------- a/test_result.md
-------+++ b/test_result.md
-------@@ -143,6 +143,33 @@ backend:
-------       - working: true
-------         agent: "testing"
-------         comment: "Tests complets réussis (10/10): API Root, GET Specialties (8 spécialités), GET Doctors (5 médecins), GET Doctors by Specialty, POST Create Patient (données camerounaises), GET Available Slots (13 créneaux), POST Create Appointment, Double Booking Prevention, PUT Confirm Appointment, Slot Unavailable After Booking. Toutes les APIs critiques fonctionnent parfaitement avec données réalistes camerounaises."
-------+      - working: true
-------+        agent: "testing"
-------+        comment: "Tests étendus réussis (16/16): Toutes les APIs de base + nouvelles fonctionnalités (recherche globale, tableau de bord médecin, gestion d'erreurs) fonctionnent parfaitement. Aucune erreur 422/500 détectée. Données camerounaises testées avec succès."
-------+
-------+  - task: "API recherche globale"
-------+    implemented: true
-------+    working: true
-------+    file: "server.py"
-------+    stuck_count: 0
-------+    priority: "high"
-------+    needs_retesting: false
-------+    status_history:
-------+      - working: true
-------+        agent: "testing"
-------+        comment: "API de recherche globale testée avec succès: recherche médecins (1 résultat pour 'Marie'), recherche spécialités (1 résultat pour 'Cardio'). Retourne des résultats structurés avec type, titre, sous-titre et métadonnées."
-------+
-------+  - task: "API tableau de bord médecin"
-------+    implemented: true
-------+    working: true
-------+    file: "server.py"
-------+    stuck_count: 0
-------+    priority: "high"
-------+    needs_retesting: false
-------+    status_history:
-------+      - working: true
-------+        agent: "testing"
-------+        comment: "API tableau de bord médecin testée avec succès: statistiques complètes (total_appointments, today_appointments, confirmed_appointments, pending_appointments), données médecin incluses. API rendez-vous médecin avec données patient enrichies fonctionne parfaitement."
------- 
------- frontend:
-------   - task: "Interface accueil Patient/Médecin"
-------@@ -226,4 +253,6 @@ agent_communication:
-------   - agent: "testing"
-------     message: "Tests backend complets terminés avec succès (10/10). Toutes les APIs critiques fonctionnent parfaitement: spécialités (8), médecins (5), créneaux disponibles, création patients/rendez-vous, prévention double réservation, confirmation paiement. Données camerounaises testées avec succès. Backend prêt pour intégration frontend."
-------   - agent: "main"
--------    message: "État actuel: Interface DOKTA style Doctolib implémentée avec recherche globale, navigation par onglets patient/médecin, bouton flottant médecin. Utilisateur signale un problème ('age banche'). Lancement des tests pour identifier les issues avant amélioration."
-------\ No newline at end of file
-------+    message: "État actuel: Interface DOKTA style Doctolib implémentée avec recherche globale, navigation par onglets patient/médecin, bouton flottant médecin. Utilisateur signale un problème ('age banche'). Lancement des tests pour identifier les issues avant amélioration."
-------+  - agent: "testing"
-------+    message: "Tests complets DOKTA backend terminés avec succès (16/16 - 100%). Toutes les APIs critiques testées: spécialités (8), médecins (5), créneaux disponibles (13), création patients/rendez-vous, prévention double réservation, confirmation, recherche globale (médecins/spécialités), tableau de bord médecin avec statistiques complètes, gestion d'erreurs. Aucune erreur 422/500 détectée. Données camerounaises réalistes utilisées. Backend stable et prêt pour production. Problème 'age banche' signalé par utilisateur non reproduit côté backend - possiblement lié au frontend."
-------\ No newline at end of file
--diff --git a/test_result.md b/test_result.md
--index e4faf0d..a4dbe07 100644
----- a/test_result.md
--+++ b/test_result.md
--@@ -171,6 +171,18 @@ backend:
--         agent: "testing"
--         comment: "API tableau de bord médecin testée avec succès: statistiques complètes (total_appointments, today_appointments, confirmed_appointments, pending_appointments), données médecin incluses. API rendez-vous médecin avec données patient enrichies fonctionne parfaitement."
-- 
--+  - task: "Système d'authentification JWT"
--+    implemented: true
--+    working: true
--+    file: "server.py, auth.py"
--+    stuck_count: 0
--+    priority: "high"
--+    needs_retesting: false
--+    status_history:
--+      - working: true
--+        agent: "testing"
--+        comment: "Tests complets d'authentification réussis (14/14 - 100%): ✅ API Root, ✅ Inscription Patient Camerounais (+237699XXXXXX), ✅ Inscription Médecin avec Spécialité/Tarifs, ✅ Validation Numéros Camerounais Invalides (6/6 rejetés), ✅ Prévention Doublons, ✅ Connexion Patient/Médecin, ✅ Échec Mauvais Credentials, ✅ Profil avec Token Valide, ✅ Échec sans Token/Token Invalide, ✅ Mise à jour Profil Patient/Médecin, ✅ Protection Champs Interdits. Système JWT sécurisé et fonctionnel avec validation camerounaise opérationnelle."
--+
-- frontend:
--   - task: "Interface accueil Patient/Médecin"
--     implemented: true
--@@ -255,4 +267,6 @@ agent_communication:
--   - agent: "main"
--     message: "État actuel: Interface DOKTA style Doctolib implémentée avec recherche globale, navigation par onglets patient/médecin, bouton flottant médecin. Utilisateur signale un problème ('age banche'). Lancement des tests pour identifier les issues avant amélioration."
--   - agent: "testing"
---    message: "Tests complets DOKTA backend terminés avec succès (16/16 - 100%). Toutes les APIs critiques testées: spécialités (8), médecins (5), créneaux disponibles (13), création patients/rendez-vous, prévention double réservation, confirmation, recherche globale (médecins/spécialités), tableau de bord médecin avec statistiques complètes, gestion d'erreurs. Aucune erreur 422/500 détectée. Données camerounaises réalistes utilisées. Backend stable et prêt pour production. Problème 'age banche' signalé par utilisateur non reproduit côté backend - possiblement lié au frontend."
--\ No newline at end of file
--+    message: "Tests complets DOKTA backend terminés avec succès (16/16 - 100%). Toutes les APIs critiques testées: spécialités (8), médecins (5), créneaux disponibles (13), création patients/rendez-vous, prévention double réservation, confirmation, recherche globale (médecins/spécialités), tableau de bord médecin avec statistiques complètes, gestion d'erreurs. Aucune erreur 422/500 détectée. Données camerounaises réalistes utilisées. Backend stable et prêt pour production. Problème 'age banche' signalé par utilisateur non reproduit côté backend - possiblement lié au frontend."
--+  - agent: "testing"
--+    message: "Tests système d'authentification JWT DOKTA terminés avec succès (14/14 - 100%). ✅ Inscription Patient/Médecin avec validation camerounaise (+237XXXXXXXXX), ✅ Connexion sécurisée avec tokens JWT, ✅ Validation numéros invalides (6/6 rejetés), ✅ Prévention doublons, ✅ Gestion profils avec protection champs interdits, ✅ Sécurité tokens (échec sans token/token invalide). Système d'authentification complet et sécurisé opérationnel avec Emergent LLM key. Backend authentification prêt pour production."
--\ No newline at end of file
